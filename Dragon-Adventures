local Config = {
    WindowName = "V.G Hub",
	Color = Color3.fromRGB(255,128,64),
	Keybind = Enum.KeyCode.RightControl
}
repeat wait() until game:IsLoaded() wait()
game:GetService("Players").LocalPlayer.Idled:connect(function()
game:GetService("VirtualUser"):ClickButton2(Vector2.new())
end)

game:GetService("Players").LocalPlayer.PlayerGui.NodeGui.BoostFrame.ChildAdded:Connect(
    function(v)
        if v.ClassName == "Frame" and v:FindFirstChild("ClickButton") then
            wait(0.5)
            firesignal(v.ClickShadowButton.MouseButton1Down)
            firesignal(v.ClickButton.MouseButton1Down)
        end
    end
)

local function GetDragons()
  local Target
    for i, v in ipairs(game.Players.LocalPlayer.Character.Dragons:GetChildren()) do
        if v.ClassName == "Model" and v:FindFirstChild("HumanoidRootPart")  then
            Target = v
        end
    end
    return Target
end
pcall(function()
game:GetService("ReplicatedStorage").Remotes.SpinWheelRemote:InvokeServer()
game:GetService("ReplicatedStorage").Remotes.ClaimWheelRemote:FireServer()

game.StarterGui:SetCoreGuiEnabled(1, true)
game.StarterGui:SetCoreGuiEnabled(2, true)
game.StarterGui:SetCoreGuiEnabled(3, true)


end)
function Invis()
local Clone = game.Players.LocalPlayer.Character.LowerTorso.Root:Clone()
game.Players.LocalPlayer.Character.LowerTorso.Root:remove()
Clone.Parent = game.Players.LocalPlayer.Character.LowerTorso
end 
local Feshy = Instance.new("ScreenGui")
local CurrentFish = Instance.new("TextLabel")

--Properties:

Feshy.Name = "Feshy"
Feshy.Parent = game.CoreGui
Feshy.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

CurrentFish.Name = "CurrentFish"
CurrentFish.Parent = Feshy
CurrentFish.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
CurrentFish.BackgroundTransparency = 1.000
CurrentFish.Position = UDim2.new(0, 0, 0.339622647, 0)
CurrentFish.Size = UDim2.new(0, 112, 0, 28)
CurrentFish.Font = Enum.Font.SourceSans
CurrentFish.TextColor3 = Color3.fromRGB(255, 255, 255)
CurrentFish.TextScaled = true
CurrentFish.TextSize = 14.000
CurrentFish.TextWrapped = true

spawn(function()
local script = Instance.new('LocalScript', CurrentFish)
while wait() do
CurrentFish.Text = game:GetService("Players").LocalPlayer.Settings.CurrentFish.Value 
end end)



function getUserRole(user, group)
return user:GetRoleInGroup(group)
end
game.Players.PlayerAdded:Connect(function(player)
if getUserRole(player, 2919215) == "📝Tester" or getUserRole(player, 2919215) == "❤️Contributor"  
or  getUserRole(player, 2919215) == "📣Staff" or getUserRole(player, 2919215) == "💎Administrator" or getUserRole(player, 2919215) == "🔧Other Developer" or
getUserRole(player, 2919215) == "🛠️Developer" or getUserRole(player, 2919215) == "👑Co-Owner" or  getUserRole(player, 2919215) == "👑Owner" 
then
fuckyou() 
end
end)
function fuckyou()
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(4)
            end
        end
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

-- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Teleport() after it collected everything.
Teleport()
end
local OldNameCall
OldNameCall = hookmetamethod(game, "__newindex", function(A, B, ...)
    if not checkcaller()  and (B == "WalkSpeed" or B == "JumpPower") then
        return
    end
    return OldNameCall(A, B, ...)
end)

healing = {}
for i, v in pairs(game:GetService("ReplicatedStorage").Storage.Items.Items.Healing:GetDescendants()) do
    if v.ClassName == "Tool" then
        table.insert(healing, v.Name)
    end
end
foods = {}
for i, v in pairs(game:GetService("ReplicatedStorage").Storage.Items.Items.Food:GetDescendants()) do
    if v.ClassName == "Tool" then
        table.insert(foods, v.Name)
    end
end
list = {}
for i, v in pairs(game:GetService("ReplicatedStorage").Storage.Items.Items.Food:GetDescendants()) do
    if v.ClassName == "Tool" then
        table.insert(list, v.Name)
    end
end
Dragon = {}
for i, v in pairs(game:GetService("Players").LocalPlayer.Data.Dragons:GetChildren()) do
    if v:FindFirstChild("Age") then
        table.insert(Dragon, v.Value)
    end
end



game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 30
local deku1 = {"SolsticeFlares", "SolsticeBoxes"}
local deku = {"Food", "Magic", "Resources"}

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/1201for/V.G-Hub/main/im-retarded-3"))()
local Window = Library:CreateWindow(Config, game:GetService("CoreGui"))

local Tab1 = Window:CreateTab("Dragon Adventures")
local Tab2 = Window:CreateTab("UI Settings")

local Section1 = Tab1:CreateSection("AutoFarms")
local Section2 = Tab1:CreateSection("Misc")
local Section3 = Tab2:CreateSection("Menu")
local Section4 = Tab2:CreateSection("Background")




if game.PlaceId == 3475397644 then
for i, v in pairs(game:GetService("Workspace").Interactions.Plots.Portals:GetChildren()) do
    if v.Name == "Portal" and v:FindFirstChild("ActivePortal") then
        if
            v.ActivePortal.DefaultPortalGui.PlayerLabel.Text ==
                game:GetService("Players").LocalPlayer.PlayerGui.WorkspaceGui[
                    game.Players.LocalPlayer.Name .. "_DisplayGui"
                ].ContainerFrame.NameLabel.Text
         then
            firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.TeleportPart, 0)
        end
    end
end

repeat
    wait()
until game:GetService("Workspace").Interactions.Plots.Plots[game.Players.LocalPlayer.Name .. "_Plot"]:WaitForChild(
    "Base"
)

ss1 = {}
for i, v in pairs(game:GetService("ReplicatedStorage").Storage.Items.Items.Eggs:GetDescendants()) do
    if v.ClassName == "Model" then
        table.insert(ss1, v.Name)
    end
end

local Toggle1 = Section1:CreateToggle("Auto Incubate Eggs", nil, function(State) 
Incubate = State
while Incubate do
    wait()

    for i, v in pairs(
        game:GetService("Workspace").Interactions.Plots.Plots[game.Players.LocalPlayer.Name .. "_Plot"].Base.Buildings:GetDescendants(

        )
    ) do wait(2)
        if v.Name == "Incubator" then
            v.IncubateRemote:InvokeServer(ss1) wait(2)
            v.ClaimRemote:InvokeServer()
        end
    end
end
end)
local Dropdown1 = Section1:CreateDropdown("Select Egg")
Dropdown1:AddToolTip("Select Egg To Incubate")
for i,v in next, ss1 do
Dropdown1:AddOption(v, function(String)
ss1 = String
end)
end

local Button1 = Section1:CreateButton("Clear Base", function()
game:GetService("Workspace").Interactions.Plots.Plots[game.Players.LocalPlayer.Name.."_Plot"].DeleteAllRemote:FireServer()
end)
local Toggle1 = Section1:CreateToggle("Merchant Auto Sell", nil, function(State)
sex55 = State
while sex55 do wait()

end end) 
Button1:AddToolTip("Sells Items needed for Merchant")
local Toggle1 = Section1:CreateToggle("Auto Sell", nil, function(State) 
sex = State
while sex do
    wait()
    for i, v in pairs(game:GetService("Players").LocalPlayer.Data.Resources:GetChildren()) do
        if table.find(foods,v.Name) and v.Value ~= 0 then wait(0.5)
            game:GetService("ReplicatedStorage").Remotes.SellItemRemote:FireServer(
                {["Amount"] = v.Value, ["ItemName"] = v.Name}
            )
        end
    end
end
end)





local Toggle1 = Section1:CreateToggle("Alchemy AutoFarm", nil, function(State) 
doo = State
while wait() and doo do
    for i, v in pairs(
        game:GetService("Workspace").Interactions.Plots.Plots[game.Players.LocalPlayer.Name .. "_Plot"].Base.Buildings:GetDescendants(

        )
    ) do
        if v.ClassName == "Model" and v:FindFirstChild("HarvestRemote") then
            v.HarvestRemote:InvokeServer()
        end
    end
    game:GetService("ReplicatedStorage").Remotes.RecycleResourceRemote:InvokeServer({["Apple"] = 1})
end

end)

local Toggle1 = Section1:CreateToggle("Salvage Apple Plants", nil, function(State)
nigj = State
while nigj do
    wait()
    game:GetService("Players").LocalPlayer.Remote:FireServer("SalvageBuilding", {"Plant_Apple", 1})
end
end)


local Toggle1 = Section1:CreateToggle("Automatic Apple Plants", nil, function(State)
nij = State
while nij do
    wait()
    if nij then
        for i, v in pairs(
            game:GetService("Workspace").Interactions.Plots.Plots[game.Players.LocalPlayer.Name .. "_Plot"].Base.Buildings:GetDescendants(

            )
        ) do
            if v.Name == "Plant_Apple" and v.ID then
                game:GetService("Workspace").Plots.Plots[game.Players.LocalPlayer.Name .. "_Plot"].PlaceBuildingRemote:InvokeServer(
                    {
                        ["CFrame"] = CFrame.new(
                            Vector3.new(-1955, 3.8000018596649, 4955),
                            Vector3.new(4.3711388286738e-08, -6.9938096203259e-07, 1)
                        ),
                        ["Index"] = v.ID.Value,
                        ["Name"] = "Plant_Apple"
                    }
                )
            end
        end
    end
end
   
end)
end



local Toggle1 = Section1:CreateToggle("Autocollect", nil, function(State)
yes33 = State

game:GetService("RunService").Stepped:connect(
    function()
        if yes33 then
            pcall(
                function()
                    game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState(11)
                end
            )
        end
    end
)

while yes33 do
    wait()
    pcall(
        function()
            for i, v in pairs(game:GetService("Workspace").Interactions.Nodes.Harvest[deku]:GetDescendants()) do
                if v:IsA("Model") and v:FindFirstChildOfClass("MeshPart") then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                        v:FindFirstChildOfClass("MeshPart").CFrame * CFrame.new(40, -3, 0)
                    wait(1)
                    game.Players.LocalPlayer.Character.Humanoid:MoveTo(
                        v:FindFirstChildOfClass("MeshPart").CFrame.Position
                    )
                    wait(3)
                    if not yes33 then
                        break
                    end
                    game:GetService("VirtualInputManager"):SendKeyEvent(true, "E", false, uwu)
                    wait(20)
                end
            end
        end
    )
end

end)
local Toggle1 = Section1:CreateToggle("Test", nil, function(State)
test = State
while test do
    wait()
    for i, v in pairs(game:GetService("Workspace").Interactions.Nodes.Mobs.ActiveMobs.Global:GetChildren()) do
        if v.ClassName == "MeshPart" and v:FindFirstChild("Health") then
            game.Players.LocalPlayer.Character.Dragons[Dragon]:MoveTo(v.CFrame.p + Vector3.new(0,10,0))
        end
    end
end
end)


local Dropdown1 = Section1:CreateDropdown("Select Collection")
Dropdown1:AddToolTip("Select Collection")
for i,v in next, deku do
Dropdown1:AddOption(v, function(String)
deku = String
end)
end
local Toggle1 = Section1:CreateToggle("Auto Egg", nil, function(State) 
egg = State
game:GetService("RunService").Stepped:connect(
    function()
        if egg then
            pcall(
                function()
                    game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState(11)
                end
            )
        end
    end
)
while egg do
    wait(1)
    pcall(
        function()
            for i, v in pairs(game:GetService("Workspace").Interactions.Nodes.Harvest.Eggs.ActiveNodes:GetDescendants()) do
                if v:IsA("Model") and v:FindFirstChildOfClass("MeshPart") then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v:FindFirstChildOfClass("MeshPart").CFrame * CFrame.new(40, 0, 0)
                    wait(1)
                    game.Players.LocalPlayer.Character.Humanoid:MoveTo(v:FindFirstChildOfClass("MeshPart").CFrame.Position)
                    wait(3)
                    if not egg then
                        break
                    end
                    game:GetService("VirtualInputManager"):SendKeyEvent(true, "E", false, uwu)
                end
            end
        end
    )
     wait(30)
end


end)
Toggle1:AddToolTip("Teleports to Eggs")
local Player = game.Players.LocalPlayer
local Pointer = Player.PlayerGui.FishingGui.ContainerFrame.ReelingFrame.BarLabel.InnerLabel.PointerLabel
local SafeBar = Player.PlayerGui.FishingGui.ContainerFrame.ReelingFrame.BarLabel.InnerLabel.SafeBarLabel
local Toggle1 = Section1:CreateToggle("Auto Fishing", nil, function(State)
Fesh = State

if Player.PlayerGui.FishingGui.ContainerFrame.Visible then
    if not Player.Character:FindFirstChild("FishingRod") and not Player.Backpack:FindFirstChild("FishingRod") then
        wait(.1)
        game:GetService("VirtualInputManager"):SendKeyEvent(true, "G", false, uwu)
    elseif Player.Backpack:FindFirstChild("FishingRod") then
        game:GetService("VirtualInputManager"):SendKeyEvent(true, "G", false, uwu)
        game.StarterGui:SetCore(
            "SendNotification",
            {
                Title = "Auto Fishing",
                Text = "You have to keep the game in focus otherwise it dosent work she added a stuiped check for VirtualInputManager"
            }
        )
    end
else
    game.StarterGui:SetCore(
        "SendNotification",
        {
            Title = "Auto Fishing",
            Text = "Sorry but for this to work i kinda need you to go to where you fish sorry not sorry"
        }
    )
end

if not Fesh then
    Player.PlayerGui.FishingGui.ContainerFrame.ButtonsFrame.ReelButton.Size = UDim2.new(1, 0, 1, 0)
end
spawn(
    function()
        while Fesh do
            wait()
            if Player.PlayerGui.FishingGui.ContainerFrame.Visible then
                pcall(
                    function()
                        if
                            not Player.Character:FindFirstChild("FishingRod") and
                                not Player.Backpack:FindFirstChild("FishingRod")
                         then
                            wait(.1)
                            game:GetService("VirtualInputManager"):SendKeyEvent(true, "G", false, uwu)
                        elseif Player.Backpack:FindFirstChild("FishingRod") then
                            game:GetService("VirtualInputManager"):SendKeyEvent(true, "G", false, uwu)
                        end
                        mouse1click()
                        wait(3)
                        Player.PlayerGui.FishingGui.ContainerFrame.ButtonsFrame.ReelButton.Size =
                            UDim2.new(9e9, 9e9, 9e9, 9e9)
                        repeat
                            wait()
                        until Player.Character.FishingRod.Bait.SplashWater.Playing and
                            game:GetService("Players").LocalPlayer.Settings.CurrentFish.Value ~= ""
                        wait()
                        mouse1click()
                        Player.PlayerGui.FishingGui.ContainerFrame.ButtonsFrame.ReelButton.Size = UDim2.new(1, 0, 1, 0)
                        repeat
                            if Pointer.Position.X.Scale <= SafeBar.Position.X.Scale + .01 then
                                mouse1click()
                            end
                            wait()
                        until not Player.PlayerGui.FishingGui.ContainerFrame.ReelingFrame.Visible
                        wait(1)
                    end
                )
            end
        end
    end
)
end) 
Toggle1:CreateKeybind("F", function(Key)
end)
local Toggle1 = Section1:CreateToggle("Egg Esp", nil, function(State) 

getgenv().esp3 = State
local function esp(v)
    local T = Drawing.new("Text")
    T.Visible = false
    T.Center = true
    T.Outline = true
    T.Font = 2
    T.Text = "Egg"
    T.Size = 24
    T.Color = Color3.fromRGB(203, 0, 0)
    local Tracer = Drawing.new("Line")
    Tracer.Visible = false
    Tracer.Color = Color3.fromRGB(203, 0, 0)
    Tracer.Thickness = 2
    Tracer.Transparency = 1
    local function update()
        local Re
        Re =
            game:GetService("RunService").Stepped:Connect(
            function()
                        if v and v:FindFirstChildOfClass("MeshPart") then
                            wait()
                            local Vector, Screen =
                                workspace.CurrentCamera:WorldToViewportPoint(
                                v:FindFirstChildOfClass("MeshPart").Position
                            )
                            if getgenv().esp3 and Screen then
                                T.Position = Vector2.new(Vector.X, Vector.Y)
                                Tracer.From =
                                    Vector2.new(
                                    workspace.CurrentCamera.ViewportSize.X / 2,
                                    workspace.CurrentCamera.ViewportSize.Y / 1
                                )
                                Tracer.To = Vector2.new(Vector.X, Vector.Y)
                                Tracer.Color = Color3.fromHSV((tick() % 5 / 5), 1, 1)
                                Tracer.Visible = true
                                T.Visible = true
                                T.Color = Color3.fromHSV((tick() % 5 / 5), 1, 1)
                                T.Text = v.Name
                            else
                                T.Visible = false
                                Tracer.Visible = false
                            end
                        elseif v:FindFirstChildOfClass("MeshPart") == nil then
                            T:Remove()
                            Tracer:Remove()
                            Re:disconnect()
                        end
                    end
                )
     
    end
    update()
end
for i, v in pairs(game:GetService("Workspace").Interactions.Nodes.Harvest.Eggs.ActiveNodes:GetChildren()) do
    if v.ClassName == "Model" and v:FindFirstChild("Egg") then
        esp(v)
    end
end
game:GetService("Workspace").Interactions.Nodes.Harvest.Eggs.ActiveNodes.ChildAdded:Connect(
    function(v)
        if v:IsA("Model") and v:FindFirstChild("Egg") then
            esp(v)
        end
    end
)
end)

local Button1 = Section1:CreateButton("Equip Selected Dragon", function()
for i,v in pairs(game:GetService("Players").LocalPlayer.Data.Dragons:GetDescendants()) do
if  v.ClassName == 'StringValue' and  v.Value == Dragon and v:FindFirstChild("Stats") then 
game:GetService("ReplicatedStorage").Remotes.EquipDragonRemote:InvokeServer(v.Name)
end end 
end) 

local Dropdown1 = Section1:CreateDropdown("Select Dragon")
Dropdown1:AddToolTip("Select Dragon")
for i,v in next,Dragon do
Dropdown1:AddOption(v, function(String)
Dragon = String
end)
end


local Button1 = Section1:CreateButton("UnEquip All Dragons", function()
for i, v in pairs(game:GetService("Players").LocalPlayer.Character.Dragons:GetDescendants()) do
    if v.ClassName == "Model" and v:FindFirstChild("ID") then
        game:GetService("ReplicatedStorage").Remotes.UnequipDragonRemote:InvokeServer(v.Name)
    end
end
end)

local Toggle1 = Section1:CreateToggle("Auto Feed Dragon", nil, function(State) 
feed = State
while feed do wait()
        if feed then
            pcall(
                function()
                    for i, v in pairs(game:GetService("Players").LocalPlayer.Character.Dragons:GetChildren()) do
                        if v.ClassName == "Model" and v:FindFirstChild("ID") then
                            game:GetService("ReplicatedStorage").Remotes.FeedDragonRemote:InvokeServer(
                                v.Name,
                                {["Amount"] = 1, ["ItemName"] = list}
                            )
                        end
                    end
                end
            )
        end
    end
end)
local Dropdown1 = Section1:CreateDropdown("Select Food")
Dropdown1:AddToolTip("Select Food")
for i,v in next,list do
Dropdown1:AddOption(v, function(String)
list = String
end)
end
local Toggle1 = Section1:CreateToggle("Auto grow Dragons", nil, function(State) 
feed2 = State
while feed2 do wait()
        if feed2 then
            pcall(
                function()
                    for i, v in pairs(game:GetService("Players").LocalPlayer.Character.Dragons:GetDescendants()) do
                        if v.ClassName == "Model" and v:FindFirstChild("ID") then
                            game:GetService("ReplicatedStorage").Remotes.GrowDragonRemote:InvokeServer(tostring(v.Name))
                        end
                    end
                end
            )
        end
    end
end)
local Toggle1 = Section1:CreateToggle("Auto Heal Dragons", nil, function(State) 
feed1 = State
while feed1 do wait(0.1)
        if feed1 then
            pcall(
                function()
                    for i, v in pairs(game:GetService("Players").LocalPlayer.Character.Dragons:GetChildren()) do
                        if v.ClassName == "Model" and v:FindFirstChild("ID") then
                            game:GetService("ReplicatedStorage").Remotes.HealDragonRemote:InvokeServer(
                                tostring(v.Name),
                                healing
                            )
                        end
                    end
                end
            )
        end
    end
end)
local Dropdown1 = Section1:CreateDropdown("Select Healing")
Dropdown1:AddToolTip("Select Healing")
for i,v in next,healing do
Dropdown1:AddOption(v, function(String)
healing = String
end)
end


local Toggle1 = Section1:CreateToggle("Auto Invis", nil, function(State)
ssyes = State
Invis()
game.Players.LocalPlayer.CharacterAdded:Connect(function()
if ssyes then
Invis() end end)
if not ssyes then
game:GetService('Players').LocalPlayer.Character.UpperTorso:Destroy()
end
end)
local Label1 = Section1:CreateLabel("World Teleports")
local Button1 = Section1:CreateButton("Winter Event", function()
game:GetService("TeleportService"):Teleport(5777228223, LocalPlayer) end)
local Button1 = Section1:CreateButton("Lobby", function()
game:GetService("TeleportService"):Teleport(3475397644, LocalPlayer) end)


local Button1 = Section1:CreateButton("Accessory", function()
game:GetService("TeleportService"):Teleport(5391312853, LocalPlayer) end)

local Button1 = Section1:CreateButton("Leisure", function()
game:GetService("TeleportService"):Teleport(4601778915, LocalPlayer) end)
local Button1 = Section1:CreateButton("GrassLands", function()

game:GetService("TeleportService"):Teleport(3475419198, LocalPlayer) end)
local Button1 = Section1:CreateButton("Jungle", function()

game:GetService("TeleportService"):Teleport(3475422608, LocalPlayer) end)

local Button1 = Section1:CreateButton("Valcano", function()
game:GetService("TeleportService"):Teleport(3487210751, LocalPlayer) end)

local Button1 = Section1:CreateButton("Tundra", function()
game:GetService("TeleportService"):Teleport(3623549100, LocalPlayer) end)

local Button1 = Section1:CreateButton("Ocean", function()
game:GetService("TeleportService"):Teleport(3737848045, LocalPlayer) end)

local Button1 = Section1:CreateButton("Desert", function()
game:GetService("TeleportService"):Teleport(3752680052, LocalPlayer) end)

local Button1 = Section1:CreateButton("Fantasy", function()
game:GetService("TeleportService"):Teleport(4174118306, LocalPlayer) end)

local Button1 = Section1:CreateButton("WasteLands", function()
game:GetService("TeleportService"):Teleport(4728805070, LocalPlayer) end)

local Button1 = Section1:CreateButton("Prehistoric", function()
game:GetService("TeleportService"):Teleport(4869039553, LocalPlayer) end)
local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/1201for/V.G-Hub/main/Karrot-Esp"))()

local Toggle1 = Section2:CreateToggle("Player Esp", nil, function(State)
    ESP:Toggle(State)
end)
local Toggle1 = Section2:CreateToggle("Tracers Esp", nil, function(State)
    ESP.Tracers = State
end)
local Toggle1 = Section2:CreateToggle("Name Esp", nil, function(State)
    ESP.Names = State
end)
local Toggle1 = Section2:CreateToggle("Boxes Esp", nil, function(State)
    ESP.Boxes = State
end)


local TextBox1 = Section2:CreateTextBox("WalkSpeed", "Only numbers", true, function(Value)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
end)
local TextBox1 = Section2:CreateTextBox("JumpPower", "Only numbers", true, function(Value)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
end)
local Toggle1 = Section2:CreateToggle("Infinite Jump", nil, function(State)
Infinite = State
game:GetService("UserInputService").JumpRequest:connect(function()
	if Infinite then
		game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
	end
end) end)


local Toggle1 = Section2:CreateToggle("G PlatFormNoclip", nil, function(State)
yes44 = State
noclip = false
game:GetService("RunService").Stepped:connect(
    function()
        if noclip then
            game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
        end
    end
)
game.Players.LocalPlayer:GetMouse().KeyDown:connect(
    function(key)
        if key == "g" then
            if yes44 then
                noclip = not noclip
                game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
            end
        end
    end
)
end)
local Toggle1 = Section2:CreateToggle("N NonePlatFormNoclip", nil, function(State)
hoe = State
game.Players.LocalPlayer:GetMouse().KeyDown:connect(
    function(v)
        if v == "n" then
            NoClip = not NoClip
            game:GetService("RunService").Stepped:connect(
                function()
                    if NoClip then
                     if hoe then
                        for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                            pcall(
                                function()
                                    if v.ClassName == "Part" or v.ClassName == "MeshPart" then
                                        v.CanCollide = false
                                    end
                                end
                            )
                        end
                    end
                end
            end
            )
        end
    end
)
end)


local Toggle1 = Section2:CreateToggle("B Fly", nil, function(State)
sex2 = State
local Max = 0
local Players = game.Players
local LP = Players.LocalPlayer
local Mouse = LP:GetMouse()
Mouse.KeyDown:connect(function(k)
if k:lower() == 'b' then
Max = Max + 1
getgenv().Fly = false
if sex2 then
local T = LP.Character.UpperTorso
local S = {
F = 0,
B = 0,
L = 0,
R = 0
}
local S2 = {
F = 0,
B = 0,
L = 0,
R = 0
}
local SPEED = 5
local function FLY()
getgenv().Fly = true
local BodyGyro = Instance.new('BodyGyro', T)
local BodyVelocity = Instance.new('BodyVelocity', T)
BodyGyro.P = 9e4
BodyGyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
BodyGyro.cframe = T.CFrame
BodyVelocity.velocity = Vector3.new(0, 0.1, 0)
BodyVelocity.maxForce = Vector3.new(9e9, 9e9, 9e9)
spawn(function()
repeat
wait()
LP.Character.Humanoid.PlatformStand = false
if S.L + S.R ~= 0 or S.F + S.B ~= 0 then
SPEED = 200
elseif not (S.L + S.R ~= 0 or S.F + S.B ~= 0) and SPEED ~= 0 then
SPEED = 0
end
if (S.L + S.R) ~= 0 or (S.F + S.B) ~= 0 then
BodyVelocity.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (S.F + S.B)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(S.L + S.R, (S.F + S.B) * 0.2, 0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
S2 = {
F = S.F,
B = S.B,
L = S.L,
R = S.R
}
elseif (S.L + S.R) == 0 and (S.F + S.B) == 0 and SPEED ~= 0 then
BodyVelocity.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (S2.F + S2.B)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(S2.L + S2.R, (S2.F + S2.B) * 0.2, 0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
else
BodyVelocity.velocity = Vector3.new(0, 0.1, 0)
end
BodyGyro.cframe = game.Workspace.CurrentCamera.CoordinateFrame
until not getgenv().Fly
S = {
F = 0,
B = 0,
L = 0,
R = 0
}
S2 = {
F = 0,
B = 0,
L = 0,
R = 0
}
SPEED = 0
BodyGyro:destroy()
BodyVelocity:destroy()
LP.Character.Humanoid.PlatformStand = false
end)
end
Mouse.KeyDown:connect(function(k)
if k:lower() == 'w' then
S.F = 1
elseif k:lower() == 's' then
S.B = -1
elseif k:lower() == 'a' then
S.L = -1
elseif k:lower() == 'd' then
S.R = 1
end
end)
Mouse.KeyUp:connect(function(k)
if k:lower() == 'w' then
S.F = 0
elseif k:lower() == 's' then
S.B = 0
elseif k:lower() == 'a' then
S.L = 0
elseif k:lower() == 'd' then
S.R = 0
end
end)
FLY()
if Max == 2 then
getgenv().Fly = false
Max = 0
end
end
end
end)
end)
local Button1 = Section2:CreateButton("Anti Lag", function()
for _, v in pairs(game:GetService("Workspace"):GetDescendants()) do
    if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then --- i stole this from the actual game LOL >-<
        v.Material = Enum.Material.SmoothPlastic
        if v:IsA("Texture") then
            v:Destroy()
        end
    end
end

end)

local Button1 = Section2:CreateButton("Teleport to RandomPlayer", function()
local randomPlayer = game.Players:GetPlayers()[math.random(1, #game.Players:GetPlayers())]

game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
    CFrame.new(
    Vector3.new(
        randomPlayer.Character.Head.Position.X,
        randomPlayer.Character.Head.Position.Y,
        randomPlayer.Character.Head.Position.Z
    )
)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(randomPlayer.Character.Head.Position.X, randomPlayer.Character.Head.Position.Y, randomPlayer.Character.Head.Position.Z))
end)
local Button1 = Section2:CreateButton("Lag Switch F3", function()
local X = false
local C = settings()

game:service "UserInputService".InputEnded:connect(
    function(V)
        if V.KeyCode == Enum.KeyCode.F3 then
            X = not X
            C.Network.IncomingReplicationLag = X and 10 or 0
        end
    end
)
end) 
local Button1 = Section2:CreateButton("ServerHop", function()
fuckyou() 
end)
local Button1 = Section2:CreateButton("Rejoin", function()
game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer) end)

local Toggle3 = Section3:CreateToggle("UI Toggle", nil, function(State)
	Window:Toggle(State)
end)
Toggle3:CreateKeybind(tostring(Config.Keybind):gsub("Enum.KeyCode.", ""), function(Key)
	Config.Keybind = Enum.KeyCode[Key]
end)
Toggle3:SetState(true)
Section3:CreateLabel("Credits DekuDimz#7960")
Section3:CreateLabel("Credits AlexR32#3232 Ui")
Section3:CreateLabel("Credits e621")
local Colorpicker3 = Section3:CreateColorpicker("UI Color", function(Color)
	Window:ChangeColor(Color)
end)
Colorpicker3:UpdateColor(Config.Color)
-- credits to jan for patterns
local Dropdown3 = Section4:CreateDropdown("Image")
local Option7 = Dropdown3:AddOption("Default", function(String)
	Window:SetBackground("2151741365")
end)
local Option8 = Dropdown3:AddOption("Hearts", function(String)
	Window:SetBackground("6073763717")
end)
local Option9 = Dropdown3:AddOption("Abstract", function(String)
	Window:SetBackground("6073743871")
end)
local Option10 = Dropdown3:AddOption("Hexagon", function(String)
	Window:SetBackground("6073628839")
end)
local Option11 = Dropdown3:AddOption("Circles", function(String)
	Window:SetBackground("6071579801")
end)
local Option12 = Dropdown3:AddOption("Lace With Flowers", function(String)
	Window:SetBackground("6071575925")
end)
local Option13 = Dropdown3:AddOption("Floral", function(String)
	Window:SetBackground("5553946656")
end)
Option7:SetOption()

local Colorpicker4 = Section4:CreateColorpicker("Color", function(Color)
	Window:SetBackgroundColor(Color)
end)
Colorpicker4:UpdateColor(Color3.new(1,1,1))

local Slider3 = Section4:CreateSlider("Transparency",0,1,nil,false, function(Value)
	Window:SetBackgroundTransparency(Value)
end)
Slider3:SetValue(0)

local Slider4 = Section4:CreateSlider("Tile Scale",0,1,nil,false, function(Value)
	Window:SetTileScale(Value)
end)
Slider4:SetValue(0.5)
game.StarterGui:SetCore("SendNotification", {
Title = "Warning";
Text = "RightControl to toggle";
})
game.StarterGui:SetCore("SendNotification", {
Title = "Credits";
Text = "CharWar Serverhops";
})
local function copyDiscord()
    setclipboard("https://discord.gg/jdt5z8T5ws")
end

local StarterGui = game:GetService("StarterGui")
local bindable = Instance.new("BindableFunction")

local function sendNotification(titleText, descText)
    StarterGui:SetCore("SendNotification",{
        Title = titleText;
        Text = descText;
        Icon = "";
        Duration = 5;
    })
end

function bindable.OnInvoke(response)
    if response == "Yes" then
        copyDiscord()
        sendNotification("discord link copied")
    end
end

StarterGui:SetCore("SendNotification", {
	Title = "V.G Hub Discord",
	Text = "Copy to clipboard?",
	Duration = 5,
	Callback = bindable,
	Button1 = "Yes",
	Button2 = "No"
})
